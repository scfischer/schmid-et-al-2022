###################
# GENERAL
###################

stages:
  - build_and_test
  - deploy

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: "Alveolus"
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: "2020.1.16f1"
  IMAGE: unityci/editor
  IMAGE_VERSION: "0.7" # https://github.com/Unity-CI/docker/releases
  UNITY_PROJECT_PATH: "${CI_PROJECT_DIR}/code/alveolus" # this needs to be an absolute path. Defaults to the root of your tree.
  BUILD_PATH: "${CI_PROJECT_DIR}/${BUILD_NAME}-${BUILD_TARGET}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}/"

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci-scripts/before_script.sh && ./ci-scripts/before_script.sh
    - chmod +x ./ci-scripts/set_git_credentials.sh && ./ci-scripts/set_git_credentials.sh

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - ${UNITY_PROJECT_PATH}/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

.tags: &tags
  tags:
    - docker

###################
# ACTIVATION 
###################

# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  <<: *tags
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  stage: build_and_test
  script:
    - chmod +x ./ci-scripts/get_activation_file.sh && ./ci-scripts/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

###################
# TESTS 
###################

.test: &test
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  <<: *license
  <<: *tags
  script:
    - chmod +x ./ci-scripts/test.sh && ./ci-scripts/test.sh
  artifacts:
    paths:
      - ${UNITY_PROJECT_PATH}/$TEST_PLATFORM-results.xml
      - ${UNITY_PROJECT_PATH}/$TEST_PLATFORM-coverage/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

#test-playmode:
#  <<: *test
#  variables:
#    TEST_PLATFORM: playmode
#
#test-editmode:
#  <<: *test
#  variables:
#    TEST_PLATFORM: editmode

###################
# BUILD (General)
###################

.build: &build
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  <<: *license
  <<: *tags
  script:
    - chmod +x ./ci-scripts/build.sh && ./ci-scripts/build.sh
  artifacts:
    paths:
      - "${BUILD_PATH}/*" 
    name: "${BUILD_NAME}-${BUILD_TARGET}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"

###################
# BUILD FOR LINUX
###################

# build-linux:
 # <<: *build
 # variables:
   # BUILD_TARGET: StandaloneLinux64

build-linux-il2cpp:
 <<: *build
 image: $IMAGE:$UNITY_VERSION-linux-il2cpp-$IMAGE_VERSION
 variables:
   BUILD_TARGET: StandaloneLinux64
   SCRIPTING_BACKEND: IL2CPP
   # https://forum.unity.com/threads/linux-il2cpp-linux-sysroot-not-specified-or-does-not-exist.854008/
   IL2CPP_ADDITIONAL_ARGS: "--sysroot-path=/ --tool-chain-path=/"

###################
# BUILD FOR MACOS 
###################

build-macos:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-mac-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneOSX

#Note: build target names changed in recent versions, use this for versions < 2017.2:
# build-osx-universal:
#   <<: *build
#   variables:
#     BUILD_TARGET: StandaloneOSXUniversal
#
#

###################
# BUILD FOR WINDOWS 
###################

build-windows:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneWindows64

###################
# BUILD FOR WEBGL 
###################

build-webgl:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-webgl-$IMAGE_VERSION
  variables:
    BUILD_TARGET: WebGL

pages:
  <<: *tags
  image: alpine:latest
  stage: deploy
  variables:
    BUILD_TARGET: WebGL
  script:
    - mkdir -p public/build/
    - mv "${BUILD_PATH}/${BUILD_NAME}" public/build/webgl-latest
    - cp -r html/* public/ 
  artifacts:
    paths:
      - public
  only:
    - master
  needs:
    - build-webgl

###################
# BUILD FOR ANDROID 
###################

# build-android:
  # <<: *build
  # image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
  # variables:
    # BUILD_TARGET: Android
    # BUNDLE_VERSION_CODE: $CI_PIPELINE_IID
    # BUILD_APP_BUNDLE: "false"

#deploy-android:
#  stage: deploy
#  image: ruby
#  script:
#    - cd ./Builds/Android
#    - echo $GPC_TOKEN > gpc_token.json
#    - gem install bundler
#    - bundle install
#    - fastlane supply --aab $BUILD_NAME.aab --track internal --package_name com.youcompany.yourgame --json_key ./gpc_token.json
#  needs: ["build-android"]

###################
# BUILD FOR IOS 
###################

#build-ios-xcode:
#  <<: *build
#  image: $IMAGE:$UNITY_VERSION-ios-$IMAGE_VERSION
#  variables:
#    BUILD_TARGET: iOS

#build-and-deploy-ios:
#  stage: deploy
#  script:
#    - cd ./Builds/iOS/$BUILD_NAME
#    - pod install
#    - fastlane ios beta
#  tags:
#    - ios
#    - mac
#  needs: ["build-ios-xcode"]
